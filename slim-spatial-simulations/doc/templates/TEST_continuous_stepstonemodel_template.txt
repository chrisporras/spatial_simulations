initialize() {

 s = -1e-2;
 mu = 1e-2;

 initializeSLiMOptions(dimensionality="xy");
 initializeMutationRate(mu);
 initializeMutationType("m1", 1.0, "f", s);
 m1.mutationStackPolicy = "f";
 initializeGenomicElementType("g1", m1, 1.0);
 initializeGenomicElement(g1, 0, 0);
 initializeRecombinationRate(0);
 defineConstant("start", clock());
 defineConstant("numdemes", 1);
 defineConstant("demepopsize",1000);

 // spatial competition
 initializeInteractionType(1, "xy", reciprocal=T, maxDistance=30.0);
i1.setInteractionFunction("n", 5.0, 10.0);

// spatial mate choice
 initializeInteractionType(2, "xy", reciprocal=T, maxDistance=30.0);
i2.setInteractionFunction("n", 1.0, 10.0);
}

1 late() {
	sim.addSubpop("p1", 1000);

	p1.setSpatialBounds(c(0.0, 0.0, 540.0, 217.0));

	mapLines = rev(readFile("~/Desktop/SLiM_Recipes/world_map_540x217.txt"));
	mapLines = sapply(mapLines, "strsplit(applyValue, '') == '#';");
	mapValues = asFloat(mapLines);

	p1.defineSpatialMap("world", "xy", c(540, 217), mapValues,
		valueRange=c(0.0, 1.0), colors=c("#0000CC", "#55FF22"));

	// start near a specific map location
	for (ind in p1.individuals) {
		ind.x = rnorm(1, 300.0, 1.0);
		ind.y = rnorm(1, 100.0, 1.0);
	}
}
1: late() {
	i1.evaluate();
	i2.evaluate();
}
fitness(NULL) {
	comp = i1.totalOfNeighborStrengths(individual) / p1.individualCount;
	comp = min(c(comp, 0.99));
	return 1.0 - comp;
}
1: mateChoice() {
	return i2.strength(individual);
}
modifyChild() {
	do pos = parent1.spatialPosition + rnorm(2, 0, 2.0);
	while (!p1.pointInBounds(pos));

	// prevent dispersal into water
	if (p1.spatialMapValue("world", pos) == 0.0)
		return F;

	child.setSpatialPosition(pos);
	return T;
}

late() {
 // remove any new mutations added to the disabled diploid genomes
 sim.subpopulations.individuals.genome2.removeMutations();

 // remove mutations in the haploid genomes that have fixed
 muts = sim.mutationsOfType(m1);
 freqs = sim.mutationFrequencies(NULL, muts);
 sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}

1000 late()  {
 subpops = sim.subpopulations;
 for (i in 1:length(subpops))
 {
 freq = sim.mutationFrequencies(subpops[subpops.id == i],sim.mutationsOfType(m1));
 print(paste(("Deme number: " + asString(i) + "_")));
 print(2*sum(freq));
}
 cat("\n"+"#"+"Elapsed time: " + (clock() - start) + "s\n");
 sim.simulationFinished();
}
